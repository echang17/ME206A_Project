// Generated by gencpp from file vision/VisualData.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_VISUALDATA_H
#define VISION_MESSAGE_VISUALDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace vision
{
template <class ContainerAllocator>
struct VisualData_
{
  typedef VisualData_<ContainerAllocator> Type;

  VisualData_()
    : m1()
    , m2()
    , m3()
    , m4()
    , human_ar()  {
    }
  VisualData_(const ContainerAllocator& _alloc)
    : m1(_alloc)
    , m2(_alloc)
    , m3(_alloc)
    , m4(_alloc)
    , human_ar(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _m1_type;
  _m1_type m1;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _m2_type;
  _m2_type m2;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _m3_type;
  _m3_type m3;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _m4_type;
  _m4_type m4;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _human_ar_type;
  _human_ar_type human_ar;





  typedef boost::shared_ptr< ::vision::VisualData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::VisualData_<ContainerAllocator> const> ConstPtr;

}; // struct VisualData_

typedef ::vision::VisualData_<std::allocator<void> > VisualData;

typedef boost::shared_ptr< ::vision::VisualData > VisualDataPtr;
typedef boost::shared_ptr< ::vision::VisualData const> VisualDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::VisualData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::VisualData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision::VisualData_<ContainerAllocator1> & lhs, const ::vision::VisualData_<ContainerAllocator2> & rhs)
{
  return lhs.m1 == rhs.m1 &&
    lhs.m2 == rhs.m2 &&
    lhs.m3 == rhs.m3 &&
    lhs.m4 == rhs.m4 &&
    lhs.human_ar == rhs.human_ar;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision::VisualData_<ContainerAllocator1> & lhs, const ::vision::VisualData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision::VisualData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::VisualData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::VisualData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::VisualData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::VisualData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::VisualData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::VisualData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d66a0c6279d93fd1e1e5ac20418fdde7";
  }

  static const char* value(const ::vision::VisualData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd66a0c6279d93fd1ULL;
  static const uint64_t static_value2 = 0xe1e5ac20418fdde7ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::VisualData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/VisualData";
  }

  static const char* value(const ::vision::VisualData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::VisualData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseStamped m1\n"
"geometry_msgs/PoseStamped m2\n"
"geometry_msgs/PoseStamped m3\n"
"geometry_msgs/PoseStamped m4\n"
"geometry_msgs/PoseStamped human_ar\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::vision::VisualData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::VisualData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.m1);
      stream.next(m.m2);
      stream.next(m.m3);
      stream.next(m.m4);
      stream.next(m.human_ar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisualData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::VisualData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::VisualData_<ContainerAllocator>& v)
  {
    s << indent << "m1: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.m1);
    s << indent << "m2: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.m2);
    s << indent << "m3: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.m3);
    s << indent << "m4: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.m4);
    s << indent << "human_ar: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.human_ar);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_VISUALDATA_H
